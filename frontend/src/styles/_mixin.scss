// SOURCES
// https://dev.to/alemesa/10-awesome-sass-scss-mixins-5ci2
// https://www.barrage.net/blog/technology/top-8-sass-mixins

@use "./variable" as v;

// SIZE

@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}

// FLEXBOX

@mixin flex($direction, $justify, $align) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-center-column {
  @include flex-center;
  flex-direction: column;
}

@mixin flex-center-vert {
  display: flex;
  align-items: center;
}

@mixin flex-center-horiz {
  display: flex;
  justify-content: center;
}

@mixin avatar {
  width: 40px;
  border: 1px solid v.$color-blue-dianne;
  border-radius: v.$border-radius-circle;
}

// POSITION

@mixin position(
  $position: absolute,
  $top: null,
  $right: null,
  $bottom: null,
  $left: null,
  $z-index: initial
) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  z-index: $z-index;
}

// BACKGROUND

@mixin cover-background {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}

// MEDIA QUERIES

$tablet: 768;
$large: 1024;
$desktop: 1280;

@mixin tablet {
  @media only screen and (min-width: ($tablet * 1px)) {
    @content;
  }
}

@mixin large {
  @media only screen and (min-width: ($large * 1px)) {
    @content;
  }
}

@mixin desktop {
  @media only screen and (min-width: ($desktop * 1px)) {
    @content;
  }
}

// VISIBILITY

@mixin fade($type) {
  @if $type== "hide" {
    visibility: hidden;
    opacity: 0;
    transition: visibility 1s, opacity 1s;
  } @else if $type== "show" {
    visibility: visible;
    opacity: 1;
    transition: visibility 1s, opacity 1s;
  }
}

// ELEMENTS

@mixin inputStyle {
  background-color: v.$background-color-base;
  border: v.$border-width-m solid v.$border-color-base;
  border-radius: v.$border-radius-rounded;
  padding: v.$space-xs;
}

@mixin inputStyleWithShadow {
  background-color: v.$background-color-base;
  border: v.$border-width-m solid v.$border-color-base;
  border-radius: v.$border-radius-rounded;
  box-shadow: v.$box-shadow-l;
  padding: v.$space-xs;
}

@mixin emptyInputStyle {
  border: none;
}

@mixin buttonStyle($backgroundColor, $fontColor) {
  background-color: $backgroundColor;
  color: $fontColor;
  border: none;
  border-radius: v.$border-radius-rounded;
  padding: v.$space-s;
  font-size: v.$font-size-m;
  cursor: pointer;
  &:hover {
    opacity: v.$opacity-hover;
  }
}

@mixin textSizeS($color) {
  font-size: 0.75rem;
  color: $color;
  :hover {
    opacity: v.$opacity-hover;
    text-decoration: underline;
  }
}

@mixin inlineLink {
  color: v.$color-cerise;
  &:hover {
    opacity: v.$opacity-hover;
    text-decoration: underline;
  }
}

@mixin borderRight($color) {
  border-right: v.$border-width-m solid $color;
}

@mixin unbuttonize {
  // This removes styles added by default to button elements.
  background-color: transparent;
  border: none;
  margin: 0;
  padding: 0;
  text-align: inherit;
  font: inherit;
  border-radius: 0;
  appearance: none;
}

@mixin buttonSize($width, $height, $padding) {
  width: $width;
  height: $height;
  flex-shrink: 0;
  border-radius: 20px;
  padding: $padding;
  text-decoration: none;
}

@mixin buttonColor($backgroundColor, $fontColor) {
  background-color: $backgroundColor;
  color: $fontColor;
}
